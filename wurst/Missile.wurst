package Missile
import TimerUtils

// Homing
// Adjust to beginning height and end height
// Create pitch etc.
// Add pointing





public interface MissileAction
    function run()


public class Missile


    private static let UPDATEFREQ = 0.01
    private static let GRAVITY = -9.82 * UPDATEFREQ

    private angle direction

    private vec3 pos

    private vec3 velocity

    private effect missileSfx

    private timer updateTimer


    construct( vec3 originPos, vec3 targetPos, string sfx, real speed, real arc )


        let distance = originPos.distanceTo(targetPos)
    
        let direction = originPos.angleTo2d(targetPos).radians()
        let actualSpeed = speed * UPDATEFREQ

        print(actualSpeed)
        print(distance)
        

        velocity = vec3( actualSpeed * Cos(direction),
                         actualSpeed * Sin(direction),

                         Tan(arc)*actualSpeed
        )   
                         
                         //SquareRoot( (-GRAVITY*distance)/(Sin(2*arc))) - actualSpeed
                              

                        
                              

        print(velocity.toString())

        pos = originPos

        missileSfx = addEffect( sfx, pos )

        // Timer
        updateTimer = getTimer()
        ..setData( this castTo int )
        ..startPeriodic( UPDATEFREQ, () -> GetExpiredTimer().getData() castTo thistype.update() ) 



    ondestroy
        updateTimer.release()
        missileSfx.destr()

    function update()

        velocity.z += GRAVITY

        pos += velocity

        missileSfx.setPos(pos)

        if pos.z < 0
            destroy this

        

    function addPeriodicAction(  )


    function addEndAction( MissileAction action )


    
 
    function getPos() returns vec2
        return pos.toVec2()

    function getPos3() returns vec3
        return pos




