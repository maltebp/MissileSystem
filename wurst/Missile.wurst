package Missile
import TimerUtils
import Assets
import ClosureTimers

// Homing
// Adjust to beginning height and end height
// Create pitch etc.
// Add pointing





public interface MissileAction
    function run()


public class Missile


    private static let UPDATEFREQ = 0.01
    private static let GRAVITY = -9.82 * UPDATEFREQ

    private angle direction

    private vec3 pos

    private vec3 velocity

    private real gravity

    private effect missileSfx

    private timer updateTimer

    private real targetZ


    construct( vec3 originPos, vec3 targetPos, string sfx, real speed, real arc )


        let distance = originPos.distanceTo(targetPos)
        let heightDif =  targetPos.z - originPos.z
        let direction = originPos.angleTo2d(targetPos).radians()

        let time = distance / speed

        targetZ = targetPos.z

        print("height dif: "+heightDif.toString(3))
        print("time: "+time.toString())
        

        velocity = vec3( Cos(direction) * speed,
                         Sin(direction) * speed,

                         Tan(arc) * speed
        )   
                         
                         //SquareRoot( (-GRAVITY*distance)/(Sin(2*arc))) - actualSpeed
                           


        gravity =  (2 / time) * (heightDif / time - velocity.z)

        

        print("Gravity: "+gravity.toString(5))
        
        //(2*heightDif + 2*velocity.z * time ) / (time*time)
        
        //(Sin(2*arc) * velocity.length()*velocity.length()) / distance
                              
        
        print(velocity.toString())

        pos = originPos

        missileSfx = addEffect( sfx, pos )

        // Timer
        updateTimer = getTimer()
        ..setData( this castTo int )
        ..startPeriodic( UPDATEFREQ, () -> GetExpiredTimer().getData() castTo thistype.update() ) 



    ondestroy
        updateTimer.release()
        missileSfx.destr()

    function update()

        velocity.z += gravity*UPDATEFREQ

        pos += velocity*UPDATEFREQ

        missileSfx.setPos(pos)

        if pos.z < targetZ

            let sfx = addEffect(Objects.battleStandard, pos)
            doAfter(2) ->
                sfx.destr()

            destroy this

        

    function addPeriodicAction(  )

    function addEndAction( MissileAction action )


    
 
    function getPos() returns vec2
        return pos.toVec2()

    function getPos3() returns vec3
        return pos




